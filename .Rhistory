# Example Dataset: Monthly dengue cases in a city
# Simulate the data for the lecture
set.seed(123)  # For reproducibility
dengue_data <- tibble(
Month = rep(1:12, times = 3),  # Months (repeated for 3 years)
Year = rep(2018:2020, each = 12),  # Years
Temperature = rnorm(36, mean = 30, sd = 2),  # Average temperature (Â°C)
Rainfall = rnorm(36, mean = 150, sd = 50),   # Monthly rainfall (mm)
DengueCases = rpois(36, lambda = 30)         # Number of dengue cases
)
# Preview the dataset
glimpse(dengue_data)
# Poisson Regression
# Univariate Poisson Regression: Effect of Rainfall on Dengue Cases
uv_poisson <- glm(DengueCases ~ Rainfall,
data = dengue_data,
family = poisson(link = "log"))  # Specify Poisson distribution
# Summarize the univariate Poisson regression model
summary(uv_poisson)
# Reporting results
report(uv_poisson)
# table
uv_poisson |>
tbl_regression()
View(dengue_data)
source("I:/General/SAR/scripts/04-gtsummary/09_PoisonRegression.R")
# table
dengue_data |>
tbl_uvregression(
method = glm,
family = poisson(link = "log"),
)
# table
dengue_data |>
select(1:4) |>
tbl_uvregression(
y = DengueCases,
method = glm,
family = poisson(link = "log"),
)
# table
dengue_data |>
select(1:4) |>
tbl_uvregression(
y = DengueCases,
method = glm,
family = poisson(link = "log")
)
dengue_data |>
select(1:4)
# Load necessary libraries
library(tidyverse)     # For data manipulation and visualization
library(easystats)     # For reporting and interpreting models
library(gtsummary)
library(gt)
# table
dengue_data |>
select(1:4) |>
tbl_uvregression(
y = DengueCases,
method = glm,
family = poisson(link = "log")
)
# Set a random seed for reproducibility
set.seed(123)
# Number of samples for the simulation
n <- 1000
# 1. Normal Distribution (e.g., blood pressure, height, or test scores)
# The normal distribution is widely used for continuous data that tend to cluster around a mean.
mean <- 120  # Mean of the normal distribution (e.g., average blood pressure)
sd <- 15     # Standard deviation (e.g., variability in blood pressure)
normal_data <- rnorm(n, mean = mean, sd = sd)
normal_data
# Visualize Normal Distribution using base R
hist(normal_data,
breaks = 30,
col = 'skyblue',
main = "Normal Distribution",
xlab = "Value",
ylab = "Frequency",
border = 'black')
# 2. Binomial Distribution (e.g., infection rates, pass/fail outcomes)
# Binomial distribution is used for binary outcomes (success/failure) over multiple trials.
size <- 100  # Number of trials (e.g., individuals in a study)
prob <- 0.3  # Probability of success (e.g., infection rate)
binomial_data <- rbinom(n, size, prob)
binomial_data
# Visualize Binomial Distribution using base R
barplot(table(binomial_data),
col = 'coral',
main = "Binomial Distribution",
xlab = "Successes",
ylab = "Frequency",
border = 'black')
# 3. Poisson Distribution (e.g., number of disease cases in a specific area)
# Poisson distribution models the number of events in a fixed interval, often used for rare events.
lambda <- 5  # Mean number of events (e.g., number of cases)
poisson_data <- rpois(n, lambda)
# Visualize Poisson Distribution using base R
barplot(table(poisson_data),
col = 'lightgreen',
main = "Poisson Distribution",
xlab = "Number of Events",
ylab = "Frequency",
border = 'black')
# 4. Exponential Distribution (e.g., time until death, time to recovery)
# Exponential distribution is used to model the time between events in a Poisson process.
rate <- 0.1  # Rate parameter (e.g., average time between events)
exponential_data <- rexp(n, rate)
# Visualize Exponential Distribution using base R
hist(exponential_data,
breaks = 30,
col = 'lightblue',
main = "Exponential Distribution",
xlab = "Time until Event",
ylab = "Frequency",
border = 'black')
# 5. Gamma Distribution (e.g., survival times, time to recovery)
# Gamma distribution is often used in survival analysis and to model waiting times.
shape <- 2   # Shape parameter
scale <- 2   # Scale parameter
gamma_data <- rgamma(n, shape, scale)
# Visualize Gamma Distribution using base R
hist(gamma_data,
breaks = 30,
col = 'pink',
main = "Gamma Distribution",
xlab = "Survival Time",
ylab = "Frequency",
border = 'black')
# 6. Log-Normal Distribution (e.g., time to reach a health threshold)
# Log-Normal distribution is useful when data is positively skewed, such as biological growth processes.
log_normal_data <- rlnorm(n, meanlog = 0, sdlog = 1)
# Visualize Log-Normal Distribution using base R
hist(log_normal_data,
breaks = 30,
col = 'purple',
main = "Log-Normal Distribution",
xlab = "Value",
ylab = "Frequency",
border = 'black')
# 7. Beta Distribution (e.g., modeling probabilities such as vaccination rates)
# Beta distribution is used to model proportions or probabilities between 0 and 1.
alpha <- 2    # Shape parameter 1
beta <- 5     # Shape parameter 2
beta_data <- rbeta(n, alpha, beta)
# Visualize Beta Distribution using base R
hist(beta_data,
breaks = 30,
col = 'orange',
main = "Beta Distribution",
xlab = "Proportion",
ylab = "Frequency",
border = 'black')
# 8. Weibull Distribution (e.g., failure times, survival analysis)
# Weibull distribution is commonly used in reliability analysis and survival studies.
shape_wei <- 1.5  # Shape parameter
scale_wei <- 2    # Scale parameter
weibull_data <- rweibull(n, shape_wei, scale_wei)
# Visualize Weibull Distribution using base R
hist(weibull_data,
breaks = 30,
col = 'lightyellow',
main = "Weibull Distribution",
xlab = "Survival Time",
ylab = "Frequency",
border = 'black')
# Set random seed for reproducibility
set.seed(123)
# Number of iterations for the simulation
n_simulations <- 10000
# 1. Simulating the Total Number of Cases in an Outbreak
# Assume an outbreak where the number of cases in a population follows a Poisson distribution
lambda <- 50  # Average number of new cases per day
poisson_simulation <- rpois(n_simulations, lambda)
poisson_simulation
# 2. Simulating the Time to Recovery in Days
# Assume the recovery time for individuals follows an Exponential distribution
mean_recovery_time <- 7  # Average recovery time in days
recovery_simulation <- rexp(n_simulations, rate = 1 / mean_recovery_time)
recovery_simulation
# 3. Simulating Disease Transmission Rates in a Population
# Assume the probability of transmission follows a Beta distribution (proportion)
alpha <- 2  # Shape parameter 1
beta <- 5   # Shape parameter 2
transmission_simulation <- rbeta(n_simulations, alpha, beta)
transmission_simulation
# 4. Simulating the Risk of a Disease (Binary Outcome)
# The risk of contracting a disease in a population can be modeled with a Binomial distribution
population_size <- 1000  # Total population size
risk_probability <- 0.1  # Probability of contracting the disease
disease_outcome_simulation <- rbinom(n_simulations, population_size, risk_probability)
disease_outcome_simulation
# 5. Calculating the Total Cost of Treatment
# Suppose the cost of treatment per patient follows a normal distribution
mean_cost <- 2000  # Average treatment cost
sd_cost <- 500     # Standard deviation of treatment cost
treatment_cost_simulation <- rnorm(n_simulations, mean = mean_cost, sd = sd_cost)
treatment_cost_simulation
# 6. Simulating the Number of Hospital Admissions
# Hospital admissions may follow a Poisson distribution with variable rates
lambda_hospital <- 10  # Average number of hospital admissions per day
hospital_admission_simulation <- rpois(n_simulations, lambda_hospital)
hospital_admission_simulation
# Monte Carlo Estimations
# Estimate the total number of cases in an outbreak
estimated_cases <- mean(poisson_simulation)
estimated_cases
# Estimate the average time to recovery
estimated_recovery_time <- mean(recovery_simulation)
estimated_recovery_time
# Estimate the average transmission probability
estimated_transmission_rate <- mean(transmission_simulation)
estimated_transmission_rate
# Estimate the proportion of individuals affected by the disease
estimated_disease_risk <- mean(disease_outcome_simulation / population_size)
estimated_disease_risk
# Estimate the total treatment cost
estimated_total_treatment_cost <- mean(treatment_cost_simulation)
# Estimate the average number of hospital admissions
estimated_hospital_admissions <- mean(hospital_admission_simulation)
estimated_hospital_admissions
# Visualize the distribution of some key simulations
par(mfrow = c(2, 2))  # Plot in a 2x2 grid
# 1. Distribution of Total Number of Cases
hist(poisson_simulation,
breaks = 30,
col = 'lightblue',
main = "Total Number of Cases in Outbreak",
xlab = "Number of Cases",
ylab = "Frequency",
border = 'black')
# 2. Distribution of Time to Recovery
hist(recovery_simulation,
breaks = 30,
col = 'lightgreen',
main = "Time to Recovery",
xlab = "Days",
ylab = "Frequency",
border = 'black')
# 3. Distribution of Disease Transmission Rate
hist(transmission_simulation,
breaks = 30,
col = 'lightcoral',
main = "Disease Transmission Rate",
xlab = "Transmission Probability",
ylab = "Frequency", border = 'black')
# 4. Distribution of Treatment Cost
hist(treatment_cost_simulation,
breaks = 30,
col = 'lightyellow',
main = "Treatment Cost per Patient",
xlab = "Cost ($)",
ylab = "Frequency",
border = 'black')
# Visualize the distribution of some key simulations
par(mfrow = c(2, 2))  # Plot in a 2x2 grid
# 1. Distribution of Total Number of Cases
hist(poisson_simulation,
breaks = 30,
col = 'lightblue',
main = "Total Number of Cases in Outbreak",
xlab = "Number of Cases",
ylab = "Frequency",
border = 'black')
# 2. Distribution of Time to Recovery
hist(recovery_simulation,
breaks = 30,
col = 'lightgreen',
main = "Time to Recovery",
xlab = "Days",
ylab = "Frequency",
border = 'black')
# 3. Distribution of Disease Transmission Rate
hist(transmission_simulation,
breaks = 30,
col = 'lightcoral',
main = "Disease Transmission Rate",
xlab = "Transmission Probability",
ylab = "Frequency", border = 'black')
# 4. Distribution of Treatment Cost
hist(treatment_cost_simulation,
breaks = 30,
col = 'lightyellow',
main = "Treatment Cost per Patient",
xlab = "Cost ($)",
ylab = "Frequency",
border = 'black')
# Set a random seed for reproducibility
set.seed(123)
# Number of samples for the simulation
n <- 1000
# 1. Normal Distribution (e.g., blood pressure, height, or test scores)
# The normal distribution is widely used for continuous data that tend to cluster around a mean.
mean <- 120  # Mean of the normal distribution (e.g., average blood pressure)
sd <- 15     # Standard deviation (e.g., variability in blood pressure)
normal_data <- rnorm(n, mean = mean, sd = sd)
normal_data
# Visualize Normal Distribution using base R
hist(normal_data,
breaks = 30,
col = 'skyblue',
main = "Normal Distribution",
xlab = "Value",
ylab = "Frequency",
border = 'black')
# 2. Binomial Distribution (e.g., infection rates, pass/fail outcomes)
# Binomial distribution is used for binary outcomes (success/failure) over multiple trials.
size <- 100  # Number of trials (e.g., individuals in a study)
prob <- 0.3  # Probability of success (e.g., infection rate)
binomial_data <- rbinom(n, size, prob)
binomial_data
# Visualize Binomial Distribution using base R
barplot(table(binomial_data),
col = 'coral',
main = "Binomial Distribution",
xlab = "Successes",
ylab = "Frequency",
border = 'black')
# 3. Poisson Distribution (e.g., number of disease cases in a specific area)
# Poisson distribution models the number of events in a fixed interval, often used for rare events.
lambda <- 5  # Mean number of events (e.g., number of cases)
poisson_data <- rpois(n, lambda)
# Visualize Poisson Distribution using base R
barplot(table(poisson_data),
col = 'lightgreen',
main = "Poisson Distribution",
xlab = "Number of Events",
ylab = "Frequency",
border = 'black')
# 4. Exponential Distribution (e.g., time until death, time to recovery)
# Exponential distribution is used to model the time between events in a Poisson process.
rate <- 0.1  # Rate parameter (e.g., average time between events)
exponential_data <- rexp(n, rate)
# Visualize Exponential Distribution using base R
hist(exponential_data,
breaks = 30,
col = 'lightblue',
main = "Exponential Distribution",
xlab = "Time until Event",
ylab = "Frequency",
border = 'black')
# 5. Gamma Distribution (e.g., survival times, time to recovery)
# Gamma distribution is often used in survival analysis and to model waiting times.
shape <- 2   # Shape parameter
scale <- 2   # Scale parameter
gamma_data <- rgamma(n, shape, scale)
# Visualize Gamma Distribution using base R
hist(gamma_data,
breaks = 30,
col = 'pink',
main = "Gamma Distribution",
xlab = "Survival Time",
ylab = "Frequency",
border = 'black')
# 6. Log-Normal Distribution (e.g., time to reach a health threshold)
# Log-Normal distribution is useful when data is positively skewed, such as biological growth processes.
log_normal_data <- rlnorm(n, meanlog = 0, sdlog = 1)
# Visualize Log-Normal Distribution using base R
hist(log_normal_data,
breaks = 30,
col = 'purple',
main = "Log-Normal Distribution",
xlab = "Value",
ylab = "Frequency",
border = 'black')
# 7. Beta Distribution (e.g., modeling probabilities such as vaccination rates)
# Beta distribution is used to model proportions or probabilities between 0 and 1.
alpha <- 2    # Shape parameter 1
beta <- 5     # Shape parameter 2
beta_data <- rbeta(n, alpha, beta)
# Visualize Beta Distribution using base R
hist(beta_data,
breaks = 30,
col = 'orange',
main = "Beta Distribution",
xlab = "Proportion",
ylab = "Frequency",
border = 'black')
# 8. Weibull Distribution (e.g., failure times, survival analysis)
# Weibull distribution is commonly used in reliability analysis and survival studies.
shape_wei <- 1.5  # Shape parameter
scale_wei <- 2    # Scale parameter
weibull_data <- rweibull(n, shape_wei, scale_wei)
# Visualize Weibull Distribution using base R
hist(weibull_data,
breaks = 30,
col = 'lightyellow',
main = "Weibull Distribution",
xlab = "Survival Time",
ylab = "Frequency",
border = 'black')
# Load libraries
library(survival)   # For survival analysis functions
library(survminer)  # For beautiful survival curve visualizations
# Simulate a sample dataset
# Example dataset for illustrative purposes
set.seed(123)  # For reproducibility
data <- data.frame(
time = c(5, 8, 12, 15, 18, 22, 25, 30, 35, 40),  # Survival times
status = c(1, 1, 0, 1, 1, 0, 1, 0, 1, 1),         # Event occurrence (1=event, 0=censored)
group = c("A", "B", "A", "B", "A", "B", "A", "B", "A", "B")  # Two treatment groups
)
# Examine the dataset
data
# Kaplan-Meier Survival Estimation
# Create a Surv object for survival analysis
surv_obj <- Surv(data$time, data$status)
# Fit Kaplan-Meier survival curves for groups
group_fit <- survfit(surv_obj ~ group, data = data)
# Summary of the survival model
summary(group_fit)
# Plot Kaplan-Meier survival curves
km_plot <- ggsurvplot(
group_fit,
data = data,
conf.int = TRUE,                # Add confidence intervals
pval = TRUE,                    # Add p-value for log-rank test
risk.table = TRUE,              # Add risk table below the plot
ggtheme = theme_minimal(),      # Use a minimal theme
palette = c("#E41A1C", "#377EB8")  # Custom colors for groups
)
km_plot
km_plot
# Cox Proportional Hazards Model
cox_fit <- coxph(surv_obj ~ group, data = data)
# Summary of the Cox model
summary(cox_fit)
# Plot Cox model diagnostics
cox_zph <- cox.zph(cox_fit)  # Test proportional hazards assumption
cox_zph
# Visualize scaled Schoenfeld residuals to check proportional hazards
ggcoxzph(cox_zph)
# Generate newdata for adjusted survival curves
# Use distinct values from the original dataset
new_data <- data.frame(group = unique(data$group))
new_data
# Visualize the adjusted survival curves based on the Cox model
cox_surv_plot <- ggsurvplot(
survfit(cox_fit, newdata = new_data),  # Fit the Cox model for the new data
data = data,
ggtheme = theme_minimal(),
palette = c("#E41A1C", "#377EB8"),    # Two colors for two groups
conf.int = TRUE                       # Add confidence intervals
)
# Print the plot
cox_surv_plot
#| echo: false
library(skimr)
library(gapminder)
summary(gapminder$lifeExp)
names(age)
names(trial)
# Load necessary libraries
library(tidyverse)
# Generate Example Data
# Patient demographics data
demographics <- data.frame(
PatientID = 1:5,
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Age = c(34, 45, 29, 50, 41),
Gender = c("Female", "Male", "Male", "Female", "Male")
)
# Medical test results
tests <- data.frame(
PatientID = c(1, 2, 3, 4, 5, 3, 4),
TestType = c("Blood Pressure", "Cholesterol", "Blood Sugar", "Cholesterol", "Blood Pressure", "Blood Sugar", "Blood Pressure"),
TestResult = c(120, 190, 140, 200, 130, 150, 110)
)
# Medication prescription data
medications <- data.frame(
PatientID = c(1, 2, 2, 3, 4),
Medication = c("Aspirin", "Metformin", "Statin", "Insulin", "Statin"),
Dose = c("100mg", "500mg", "20mg", "10mg", "20mg")
)
medications
tests
demographics
# 1. Using tidyr::pivot_wider to reshape the tests data
tests_wide <- tests %>%
pivot_wider(names_from = TestType, values_from = TestResult)
# 1. Using tidyr::pivot_wider to reshape the tests data
tests_wide <- tests %>%
pivot_wider(names_from = TestType, values_from = TestResult)
demographics_tests <- left_join(demographics,
tests,
by = "PatientID")
demographics_tests
# Merge the resulting data with medications
merged_data <- merge(demographics_tests,
medications,
by = "PatientID")
merged_data
# Merge demographics and tests data
demographics_tests <- merge(demographics,
tests,
by = "PatientID",
all = TRUE)
demographics_tests
# Merge the resulting data with medications
merged_data <- merge(demographics_tests,
medications,
by = "PatientID")
merged_data
library(tidyverse)
library(readxl)
# read wide data
wide_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
library(tidyverse)
library(readxl)
# read wide data
wide_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
