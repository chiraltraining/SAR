temperature <- factor(c("Low", "Medium", "High"),
levels = c("Low", "Medium", "High"),
ordered = TRUE)
temperature
# Access Levels
levels(temperature)
# Change Levels
levels(gender) <- c("F", "M")
gender
# Number of Levels
nlevels(gender)
# Convert to Numeric
as.integer(gender)
# Example: Create a simple health data frame
patient_id <- c(101, 102, 103, 104)
age <- c(55, 60, 45, 50)
gender <- c("Male", "Female", "Female", "Male")
disease_status <- c("Diabetes", "Hypertension", "Healthy", "Diabetes")
# Create a data frame from the vectors
health_data <- data.frame(PatientID = patient_id, Age = age, Gender = gender, DiseaseStatus = disease_status)
# Output the data frame
health_data
height <- c(175, 160, 162, 170)  # Numeric column for height in cm
weight <- c(70, 80, 55, 65)  # Numeric column for weight in kg
# Create a new data frame with mixed data types
health_data2 <- data.frame(PatientID = patient_id, Age = age, Gender = gender, Height = height, Weight = weight, DiseaseStatus = disease_status)
# Output the new data frame
health_data2
# The `str()` function provides a compact summary of the data frame, showing the data types of each column and the first few entries.
str(health_data2)
summary(health_data2)
names(health_data2)
dim(health_data2)
head(health_data2)  # First 6 rows
tail(health_data2)  # Last 6 rows
sapply(health_data2, class)
exercise_instruction <- "
1. Create a data frame with columns for patient ID, age, gender, height, weight, and disease status.
Add at least 5 patients.
2. Use the `summary()` function to see the summary statistics of your data frame.
3. Use `head()` to display the first few rows of the data frame.
4. Use `str()` to check the structure of your data frame.
5. Check the column names of the data frame using the `names()` function.
6. Check the data types of the columns using `sapply()`.
"
# Example: Create a simple list with a mix of data types
name <- "John"
age <- 25
height <- 175.5
is_student <- TRUE
# Create a list containing a character, numeric, logical, and other types
my_list <- list(Name = name, Age = age, Height = height, Is_Student = is_student)
# Output the list
my_list
# Explanation:
# Explanation:
# - `Name`, `Age`, `Height`, and `Is_Student` are the names of the list components.
# Explanation:
# - `Name`, `Age`, `Height`, and `Is_Student` are the names of the list components.
# - The `list()` function allows us to mix different types of data in a single list.
# Explanation:
# - `Name`, `Age`, `Height`, and `Is_Student` are the names of the list components.
# - The `list()` function allows us to mix different types of data in a single list.
# - The output shows that each list component is stored under its respective name.
# Explanation:
# - `Name`, `Age`, `Height`, and `Is_Student` are the names of the list components.
# - The `list()` function allows us to mix different types of data in a single list.
# - The output shows that each list component is stored under its respective name.
# Access List Elements
my_list$Name
# load packages
library(tidyverse)
library(skimr)
library(openxlsx)
library(readxl)
# data
install.packages("gapminder")
library(gapminder)
# data exploration
# 1. dimension
dim(gapminder)
ncol(gapminder)
nrow(gapminder)
# 2. data structure
glimpse(gapminder)
str(gapminder)
# data inspection
# 1. examine first few rows
head(gapminder)
head(gapminder, 10)
head(gapminder, n = 10)
# 2. examine last few rows
tail(gapminder)
tail(gapminder, 10)
tail(gapminder, n = 10)
# 3. sampling
sample_n(gapminder, 10)
# 4. fraction
sample_frac(gapminder, 0.25)
# load packages
library(tidyverse)
library(skimr)
library(openxlsx)
library(readxl)
# data
install.packages("gapminder")
library(gapminder)
# data exploration
# 1. dimension
dim(gapminder)
ncol(gapminder)
nrow(gapminder)
# 2. data structure
glimpse(gapminder)
str(gapminder)
# data inspection
# 1. examine first few rows
head(gapminder)
head(gapminder, 10)
head(gapminder, n = 10)
# 2. examine last few rows
tail(gapminder)
tail(gapminder, 10)
tail(gapminder, n = 10)
# 3. sampling
sample_n(gapminder, 10)
# 4. fraction
sample_frac(gapminder, 0.25)
# handling missing values
# 1. check missing values
is.na(gapminder)
is.na(airquality)
# 2. How many?
sum(is.na(gapminder))
sum(is.na(airquality))
# 3. Which columns?
colSums(is.na(gapminder))
colSums(is.na(airquality))
# 4. Is there any duplicated row?
duplicated(gapminder)
duplicated(airquality)
# 5. How many?
sum(duplicated(gapminder))
sum(duplicated(airquality))
# summary functions
summary(gapminder)
skim(gapminder)
# data processing
# import
data <- read.csv("data/QOL_Thalassemia.csv")
# data processing
# import
data <- read.csv("data/Thalassemia_QoL.csv")
data <- data |>
mutate(Physical_Health_Status = case_when(
Physical_Health_Summary < 50 ~ "Poor",
Physical_Health_Summary > 50 ~ "Good",
))
data <- data |>
mutate(Mental_Health_Status = case_when(
Mental_Health_Summary < 50 ~ "Poor",
Mental_Health_Summary > 50 ~ "Good",
))
# load packages
library(tidyverse)
library(skimr)
library(naniar)
library(stringr)
# finding missing value
test <- c(0, NA, -1)
test
test2 <- test/0
test2
# look for NA
is.na(test)
sum(is.na(test))
# look for NaN
is.nan(test2)
sum(is.nan(test2))
# look for Inf
is.infinite(test2)
sum(is.infinite(test2))
# using any()
any(is.na(test))
# starwars
starwars
names(starwars)
# check missing
any(is.na(starwars))
# count NA/missing values
starwars |>
count(sex)
# pct_complete
starwars |>
select(gender) |>
pct_complete()
# miss_var_summary()
miss_var_summary(starwars)
# gg_miss_var()
gg_miss_var(starwars)
# missing data issues
sum(c(1, 2, 3, NA))
mean(c(1, 2, 3, NA))
median(c(1, 2, 3, NA))
# removing missing value
sum(c(1, 2, 3, NA), na.rm = T)
mean(c(1, 2, 3, NA), na.rm = T)
median(c(1, 2, 3, NA), na.rm = T)
# filter() and missing data
starwars |>
filter(sex == "male" | is.na(sex))
# check missing values
sum(is.na(starwars))
# drop missing values
dim(starwars)
# drop
starwars_drop <- drop_na(starwars)
# check dimension again
dim(starwars_drop)
gg_miss_var(starwars_drop)
# drop columns
miss_var_summary(starwars)
miss_var_which(starwars)
# remove missing columns
starwars |>
select(!miss_var_which(starwars))
# Change a value to be NA
starwars |>
mutate(gender = na_if(gender, "99"))
# dealing with missing values
glimpse(starwars)
starwars <- starwars |>
mutate_if(is.character, as.factor)
glimpse(starwars)
# numeric imputation - mean, median
mean(starwars$height, na.rm = T)
median(starwars$height, na.rm = T)
# mean
starwars <- starwars |>
mutate(height = replace_na(mean(height, na.rm = T)))
# median
starwars <- starwars |>
mutate(height = replace_na(median(height, na.rm = T)))
miss_var_summary(starwars)
# categorical imputation - mode (most frequent value)
starwars$sex <- as.factor(starwars$sex)
starwars |>
count(sex) |>
arrange(desc(n))
starwars <- starwars |> mutate(sex = replace_na("male"))
miss_var_summary(starwars)
# reading diet data
data_diet <- readxl::read_excel("data/cleaning_diet_data.xlsx")
# count
data_diet |>
count(Treatment)
# reading diet data
data_diet <- readxl::read_excel("data/cleaning_diet_data.xlsx")
# count
data_diet |>
count(Treatment)
# load packages
library(tidyverse)
library(skimr)
library(naniar)
library(stringr)
# reading diet data
data_diet <- readxl::read_excel("data/cleaning_diet_data.xlsx")
# count
data_diet |>
count(Treatment)
data_diet |>
mutate(Treatment_Recoded = case_when(
Treatment == "O" ~ "Other",
Treatment == "Other" ~ "Other",
Treatment == "Ginger" ~ "Ginger",
Treatment == "mint" ~ "Peppermint",
Treatment == "Mint" ~ "Peppermint",
Treatment == "peppermint" ~ "Peppermint",
)) |>
count(Treatment_Recoded)
# efficient
data_diet |>
mutate(Treatment = case_when(
Treatment == "Ginger" ~ "Ginger",
Treatment %in% c("Mint", "mint", "Peppermint", "peppermint") ~ "Peppermint",
Treatment %in% c("O", "Other") ~ "Other"
)) |>
count(Treatment)
data_diet <- data_diet |>
mutate(Effect = case_when(Weight_change > 0 ~ "Increase",
Weight_change == 0 ~ "Same",
Weight_change < 0 ~ "Decrease"))
head(data_diet)
# str_detect()
data_diet |>
filter(str_detect(string = Effect, pattern = "D"))
data_diet |>
filter(str_detect(string = Effect, pattern = "I"))
data_diet |>
filter(str_detect(string = Effect, pattern = "S"))
# detect and replace
data_diet |>
filter(str_detect(Effect, pattern = "D"), str_replace_all("d"))
# detect and replace
data_diet |>
mutate(Treatment_recoded = case_when(
str_detect(string = Treatment, pattern = "int") ~ "Peppermint",
str_detect(string = Treatment, pattern = "^o|^O") ~ "Other",
TRUE ~ Treatment))  |>
count(Treatment, Treatment_recoded)
data_diet |>
count(Treatment)
library(tidyverse)
library(readxl)
# read wide data
wide_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
View(wide_data)
# read wide data
wide_data <- readxl::read_excel("data/Life_Expectancy_Wide.xlsx")
View(wide_data)
# wide to long
wide_data |>
pivot_longer(cols = 2:75,
names_to = "Year",
values_to = "Life_Expectancy")
# wide to long
long_data <- wide_data |>
pivot_longer(cols = 2:75,
names_to = "Year",
values_to = "Life_Expectancy")
View(long_data)
# read long data
long_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
# read long data
long_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
View(long_data)
# long to wide
long_data |>
pivot_wider(names_from = "Year",
values_from = "LifeExp")
# long to wide
long_data |>
pivot_wider(names_from = Year,
values_from = LifeExp)
# long to wide
long_data |>
pivot_wider(names_from = Year,
values_from = LifeExp)
library(tidyverse)
library(readxl)
# read wide data
wide_data <- readxl::read_excel("data/Life_Expectancy_Wide.xlsx")
# wide to long
long_data <- wide_data |>
pivot_longer(cols = 2:75,
names_to = "Year",
values_to = "Life_Expectancy")
# read long data
long_data <- readxl::read_excel("data/Life_Expectancy_Long.xlsx")
# long to wide
long_data |>
pivot_wider(names_from = Year,
values_from = LifeExp)
# long to wide
wide_data <- long_data |>
pivot_wider(names_from = Year,
values_from = LifeExp)
# Load necessary libraries
library(tidyverse)
# Generate Example Data
# Patient demographics data
demographics <- data.frame(
PatientID = 1:5,
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Age = c(34, 45, 29, 50, 41),
Gender = c("Female", "Male", "Male", "Female", "Male")
)
demographics
# Medical test results
tests <- data.frame(
PatientID = c(1, 2, 3, 4, 5, 3, 4),
TestType = c("Blood Pressure", "Cholesterol", "Blood Sugar", "Cholesterol", "Blood Pressure", "Blood Sugar", "Blood Pressure"),
TestResult = c(120, 190, 140, 200, 130, 150, 110)
)
tests
# Medication prescription data
medications <- data.frame(
PatientID = c(1, 2, 2, 3, 4),
Medication = c("Aspirin", "Metformin", "Statin", "Insulin", "Statin"),
Dose = c("100mg", "500mg", "20mg", "10mg", "20mg")
)
medications
# Merge demographics and tests data
demographics_tests <- merge(demographics,
tests,
by = "PatientID",
all = TRUE)
demographics_tests
write.csv(demographics, "data/demographics.csv", row.names = FALSE)
write.csv(tests, "data/tests.csv", row.names = FALSE)
write.csv(medications, "data/medications.csv", row.names = FALSE)
# Patient demographics data
demographics <- read.csv("data/demographics.csv")
# Medical test results
tests <- read.csv("data/tests.csv")
# Medication prescription data
medications <- read.csv("data/medications.csv")
# Merge demographics and tests data
demographics_tests <- merge(demographics,
tests,
by = "PatientID",
all = TRUE)
demographics_tests
# Merge the resulting data with medications
merged_data <- merge(demographics_tests,
medications,
by = "PatientID")
merged_data
# Load necessary libraries
library(tidyverse)     # For data manipulation and visualization
library(easystats)     # For reporting and interpreting models
library(gtsummary)
library(gt)
# Example Dataset: Monthly dengue cases in a city
# Simulate the data for the lecture
set.seed(123)  # For reproducibility
dengue_data <- tibble(
Month = rep(1:12, times = 3),  # Months (repeated for 3 years)
Year = rep(2018:2020, each = 12),  # Years
Temperature = rnorm(36, mean = 30, sd = 2),  # Average temperature (°C)
Rainfall = rnorm(36, mean = 150, sd = 50),   # Monthly rainfall (mm)
DengueCases = rpois(36, lambda = 30)         # Number of dengue cases
)
write.csv(dengue_data, "data/dengue_data.csv", row.names = FALSE)
# import dengue data
dengue_data <- read.csv("data/dengue_data.csv")
# Preview the dataset
glimpse(dengue_data)
# Poisson Regression
# Univariate Poisson Regression: Effect of Rainfall on Dengue Cases
uv_poisson <- glm(DengueCases ~ Rainfall,
data = dengue_data,
family = poisson(link = "log"))  # Specify Poisson distribution
# Summarize the univariate Poisson regression model
summary(uv_poisson)
# Reporting results
report(uv_poisson)
# Summarize the univariate Poisson regression model
summary(uv_poisson)
# Reporting results
report(uv_poisson)
# table
uv_poisson |>
tbl_regression()
# Multivariate Poisson Regression
# Multivariate Poisson Regression: Effect of Rainfall and Temperature
mv_poisson <- glm(DengueCases ~ Rainfall + Temperature,
data = dengue_data,
family = poisson(link = "log"))  # Specify Poisson distribution
# Summarize the multivariate Poisson regression model
summary(mv_poisson)
# Reporting results
report(mv_poisson)
# table
mv_poisson |>
tbl_regression()
# Ref: https://www.danieldsjoberg.com/gtsummary/reference/tbl_survfit.html?q=surviva#null
library(gtsummary)
library(gt)
library(survival)
# Pass single survfit() object
tbl_survfit(
survfit(Surv(ttdeath, death) ~ trt, trial),
times = c(12, 24),
label_header = "**{time} Month**"
)
# Pass a data frame
tbl_survfit(
trial,
y = "Surv(ttdeath, death)",
include = c(trt, grade),
probs = 0.5,
label_header = "**Median Survival**"
)
# Pass a list of survfit() objects
list(survfit(Surv(ttdeath, death) ~ 1, trial),
survfit(Surv(ttdeath, death) ~ trt, trial)) |>
tbl_survfit(times = c(12, 24))
# Adding a competing event for death (cancer vs other causes)
set.seed(1123)
library(dplyr, warn.conflicts = FALSE, quietly = TRUE)
trial2 <- trial |>
dplyr::mutate(
death_cr =
dplyr::case_when(
death == 0 ~ "censor",
runif(n()) < 0.5 ~ "death from cancer",
TRUE ~ "death other causes"
) |>
factor()
)
survfit(Surv(ttdeath, death_cr) ~ grade, data = trial2) |>
tbl_survfit(times = c(12, 24), label = "Tumor Grade")
for (i in 1:10) {
print(i)
}
# Creating Variables
x = 10            # Using equal (=) operator
y <- 15           # Using leftward (<-) operator
a <- 30
glimp
